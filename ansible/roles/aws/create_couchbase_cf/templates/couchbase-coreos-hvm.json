{ "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "CoreOS cluster running couchbase",

  "Mappings" : {
      "VpcCidrs" : {
        "eu-central-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "eu-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "us-east-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "us-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "us-west-2" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" }
      },

      "RegionMap" : {
          "us-east-1" : { "AMI" : "ami-e22f1388"},
          "us-west-2" : { "AMI" : "ami-fbf01d9b" },
          "us-west-1" : { "AMI" : "ami-e5423285"},
          "eu-central-1" : { "AMI" : "ami-9db652f2" },
          "eu-west-1" : { "AMI" : "ami-18bb026b"}
      }
  },

  "Parameters" : {
    "MasterInstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.nano","t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.nano"
    },
    "DataInstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.nano","t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.nano"
    },
    "MasterNodeCount" : {
      "Type" : "Number",
      "Default" : "2",
      "MinValue" : "1",
      "MaxValue" : "12",
      "Description" : "Number of master nodes to provision"
    },
    
    "DataNodeCount" : {
      "Type" : "Number",
      "Default" : "2",
      "MinValue" : "1",
      "MaxValue" : "12",
      "Description" : "Number of data nodes to provision"
    },
    "DiscoveryURL" : {
      "Type" : "String",
      "Description" : "A unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=4",
      "Default" : ""
    },

    "AllowDiscoveryFrom" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) from which Etcd discovery will be allowed via port 2379",
      "Default" : "0.0.0.0/0"
    },

    "KeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the Node.",
      "Default" : ""
    },

    "VpcAvailabilityZones" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Comma-delimited list of three VPC availability zones in which nodes are created.",
      "Default" : ""
    }
  },

  "Resources" : {
    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "vpc" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
        ]
      }
    },

    "PubSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet1" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
        ]
      }
    },

    "PubSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet2" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
        ]
      }
    },

    "PubSubnetAz3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet3" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet3"] ] } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
        ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc"}
      }
    },

    "PublicRouteViaIgw" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz3" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "NodeSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Node CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8091", "ToPort" : "8091", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "8092", "ToPort" : "8092", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "4001", "ToPort" : "4001", "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] } },
          { "IpProtocol" : "tcp", "FromPort" : "2379", "ToPort" : "2379", "CidrIp" : { "Ref" : "AllowDiscoveryFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "2380", "ToPort" : "2380", "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] } }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node-SG" ] ] } }
        ]
      }
    },

    "NodeLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable communication with db and Etcd",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8091", "ToPort" : "8091", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "2379", "ToPort" : "2379", "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8091", "ToPort" : "8091", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "2379", "ToPort" : "2379", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },


    "NodeLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "LoadBalancerName" : {"Fn::Join" : ["-", ["Node", { "Ref" : "Vpc" } ]]},
        "CrossZone": true,
        "SecurityGroups" : [ { "Ref" : "NodeLoadBalancerSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" }],
        "Listeners" :
          [ {
            "LoadBalancerPort" : "2379",
            "InstancePort" : "2379",
            "Protocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "8091",
            "InstancePort" : "8091",
            "Protocol" : "TCP"
          }
        ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:2379", "/health"]]},
          "HealthyThreshold" : "5",
          "UnhealthyThreshold" : "3",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "NodeIngress4001" : {
      "DependsOn" : [ "NodeSecurityGroup", "NodeSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4001",
        "ToPort" : "4001",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },

    "NodeIngress2379" : {
      "DependsOn" : [ "NodeSecurityGroup", "NodeSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2379",
        "ToPort" : "2379",
        "CidrIp" : "0.0.0.0/0"
      }
    },

    "NodeIngress2380" : {
      "DependsOn" : [ "NodeSecurityGroup", "NodeSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2380",
        "ToPort" : "2380",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },

    "MasterNodeLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "MasterInstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ cloud_config }}"] ]} }
      }
    },

    "DataNodeLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "DataInstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ cloud_config }}"] ]} }
      }
    },
    
    "MasterNodeAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "MasterNodeLaunchConfiguration" },
        "LoadBalancerNames" : [ { "Ref" : "NodeLoadBalancer" } ],
        "MinSize" : "1",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "MasterNodeCount"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node" ] ] }, "PropagateAtLaunch" : "true" },
          { "Key" : "CouchbaseRole", "Value" : "Master", "PropagateAtLaunch" : "true" }
        ]
      }
    },
    
     "DataNodeAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "DataNodeLaunchConfiguration" },
        "MinSize" : "1",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "DataNodeCount"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node" ] ] }, "PropagateAtLaunch" : "true" },
          { "Key" : "CouchbaseRole", "Value" : "Data", "PropagateAtLaunch" : "true" }          
        ]
      }
    }
  },

  "Outputs" : {
    "AdminUI" : {
      "Description" : "Admin UI",
      "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "NodeLoadBalancer", "DNSName" ] }, ":8091" ] ] }
    }
  }

}
