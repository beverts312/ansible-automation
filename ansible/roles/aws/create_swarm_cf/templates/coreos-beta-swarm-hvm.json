{ "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "CoreOS cluster running swarm",

  "Mappings" : {
      "VpcCidrs" : {
        "eu-central-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "eu-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "us-east-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "us-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" },
        "us-west-2" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24", "pubsubnet3" : "10.0.2.0/24" }
      },

      "RegionMap" : {
          "us-east-1" : { "AMI" : "ami-e22f1388"},
          "us-west-2" : { "AMI" : "ami-fbf01d9b" },
          "us-west-1" : { "AMI" : "ami-e5423285"},
          "eu-central-1" : { "AMI" : "ami-9db652f2" },
          "eu-west-1" : { "AMI" : "ami-18bb026b"}
      }
  },

  "Parameters" : {
    "MasterInstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.nano","t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.nano"
    },

    "WebInstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.nano","t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.nano"
    },

    "AppInstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.nano","t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.nano"
    },
    "AppNodeClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "1",
      "MaxValue" : "12",
      "Description" : "Number of Swarm Node instances. Please set it a multiple of AZ count."
    },

    "WebNodeClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "1",
      "MaxValue" : "12",
      "Description" : "Number of Swarm Node instances. Please set it a multiple of AZ count."
    },

    "MasterClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "1",
      "MaxValue" : "12",
      "Description" : "Number of Swarm Master instances. Please make it same as the number of AZs."
    },

    "DiscoveryURL" : {
      "Type" : "String",
      "Description" : "A unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=4",
      "Default" : ""
    },

    "AllowSwarmMasterControlFrom" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) from which SSH and docker on the master are available.",
      "Default" : "0.0.0.0/0"
    },

    "AllowEtcdDiscoveryFrom" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) from which Etcd discovery will be allowed via port 2379",
      "Default" : "0.0.0.0/0"
    },

    "KeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the master.",
      "Default" : ""
    },

    "VpcAvailabilityZones" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Comma-delimited list of three VPC availability zones in which nodes are created.",
      "Default" : ""
    }
  },

  "Resources" : {
    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "vpc" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
        ]
      }
    },

    "PubSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet1" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
        ]
      }
    },

    "PubSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet2" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
        ]
      }
    },

    "PubSubnetAz3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet3" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet3"] ] } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
        ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc"}
      }
    },

    "PublicRouteViaIgw" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz3" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "MasterSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Master CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "2375", "ToPort" : "2375", "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] } },
          { "IpProtocol" : "tcp", "FromPort" : "4000", "ToPort" : "4000", "CidrIp" : { "Ref" : "AllowSwarmMasterControlFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "4001", "ToPort" : "4001", "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] } },
          { "IpProtocol" : "tcp", "FromPort" : "2379", "ToPort" : "2379", "CidrIp" : { "Ref" : "AllowEtcdDiscoveryFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "2380", "ToPort" : "2380", "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] } }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master-SG" ] ] } }
        ]
      }
    },

    "NodeSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Node SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node-SG" ] ] } }
        ]
      }
    },

    "AppNodeSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "DependsOn" : "NodeSecurityGroup",
      "Properties" : {
        "GroupDescription" : "AppNode SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [

        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "AppNode-SG" ] ] } }
        ]
      }
    },

    "WebNodeSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "DependsOn" : "NodeSecurityGroup",
      "Properties" : {
        "GroupDescription" : "WebNode SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "1025", "ToPort" : "1035", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "WebNode-SG" ] ] } }
        ]
      }
    },


    "MasterLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable communication with Swarm Masters and Etcd",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "4000", "ToPort" : "4000", "CidrIp" : { "Ref" : "AllowSwarmMasterControlFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "2379", "ToPort" : "2379", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "2375", "ToPort" : "2375", "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] } }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "tcp", "FromPort" : "4000", "ToPort" : "4000", "CidrIp" : { "Ref" : "AllowSwarmMasterControlFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "2379", "ToPort" : "2379", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "2375", "ToPort" : "2375", "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] } }
        ]
      }
    },

    "WebNodeLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access on ports 1025-1035 ",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "1025", "ToPort" : "1035", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },

    "WebNodeLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "node-elb" ] ] },
        "CrossZone": true,
        "SecurityGroups" : [ { "Ref" : "WebNodeLoadBalancerSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" }],
        "Listeners" :
          [ {
            "LoadBalancerPort" : "1025",
            "InstancePort" : "1025",
            "Protocol" : "HTTP"
          }],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:1025", "/"]]},
          "HealthyThreshold" : "5",
          "UnhealthyThreshold" : "3",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "MasterLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "master-elb" ] ] },
        "CrossZone": true,
        "SecurityGroups" : [ { "Ref" : "MasterLoadBalancerSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" }],
        "Listeners" :
          [ {
            "LoadBalancerPort" : "2379",
            "InstancePort" : "2379",
            "Protocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "4000",
            "InstancePort" : "4000",
            "Protocol" : "TCP"
          }
        ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:2379", "/health"]]},
          "HealthyThreshold" : "5",
          "UnhealthyThreshold" : "3",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "NodeIngress4001" : {
      "DependsOn" : "NodeSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4001",
        "ToPort" : "4001",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },

    "NodeIngress2375" : {
      "DependsOn" : "NodeSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2375",
        "ToPort" : "2375",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },

    "NodeIngress2379" : {
      "DependsOn" : "NodeSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2379",
        "ToPort" : "2379",
        "CidrIp" : "0.0.0.0/0"
      }
    },

    "NodeIngress2380" : {
      "DependsOn" : "NodeSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2380",
        "ToPort" : "2380",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },

    "AppNodeIngress" : {
      "DependsOn" : "AppNodeSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "AppNodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "32750",
        "ToPort" : "40000",
        "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "WebNodeSecurityGroup", "GroupId" ] }
      }
    },

    "MasterIngress4001" : {
      "DependsOn" : [ "MasterSecurityGroup", "NodeSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4001",
        "ToPort" : "4001",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },

    "MasterIngress2379" : {
      "DependsOn" : [ "MasterSecurityGroup", "NodeSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2379",
        "ToPort" : "2379",
        "CidrIp" : "0.0.0.0/0"
      }
    },

    "MasterIngress2375" : {
      "DependsOn" : [ "MasterSecurityGroup", "NodeSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2375",
        "ToPort" : "2375",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },


    "MasterIngress2380" : {
      "DependsOn" : [ "MasterSecurityGroup", "NodeSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2380",
        "ToPort" : "2380",
        "CidrIp" : { "Fn::GetAtt" : [ "Vpc", "CidrBlock" ] }
      }
    },

    "MasterLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "MasterInstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "MasterSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ master_cloud_config }}"] ]} }
      }
    },

    "AppNodeLaunchConfiguration" : {
      "DependsOn" : [ "InternetGateway", "MasterAutoScalingGroup" ],
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "AppInstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeSecurityGroup"},{ "Ref" : "AppNodeSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ app_node_cloud_config }}"] ]} }
      }
    },

    "WebNodeLaunchConfiguration" : {
      "DependsOn" : [ "InternetGateway", "MasterAutoScalingGroup" ],
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "WebInstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeSecurityGroup"},{ "Ref" : "WebNodeSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ web_node_cloud_config }}"] ]} }
      }
    },


    "MasterAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "MasterLaunchConfiguration" },
        "LoadBalancerNames" : [ { "Ref" : "MasterLoadBalancer" } ],
        "MinSize" : "1",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "MasterClusterSize"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "WebNodeAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "WebNodeLaunchConfiguration" },
        "LoadBalancerNames" : [ { "Ref" : "WebNodeLoadBalancer" } ],
        "MinSize" : "1",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "WebNodeClusterSize"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "WebNode" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "AppNodeAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "AppNodeLaunchConfiguration" },
        "MinSize" : "1",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "AppNodeClusterSize"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "AppNode" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    }
  },

  "Outputs" : {

    "MasterDockerPs" : {
      "Description" : "Command to run a 'docker info' on the cluster master",
      "Value" : { "Fn::Join" : [ "", [ "docker -H tcp://", { "Fn::GetAtt" : [ "MasterLoadBalancer", "DNSName" ] }, ":4000 info" ] ] }
    },
    "MasterPublicDNS" : {
      "Description" : "ELB of Masters",
      "Value" : { "Fn::GetAtt" : [ "MasterLoadBalancer", "DNSName" ] }
    },
    "WebNodeLoadBalancer" : {
      "Description" : "ELB of Web Nodes",
      "Value" : { "Fn::GetAtt" : [ "WebNodeLoadBalancer", "DNSName" ] }
    }
  }

}
